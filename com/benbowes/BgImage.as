package com.benbowes{	import flash.net.*;	import flash.display.*;	import flash.events.*;	import flash.text.*;                      	import flash.utils.getDefinitionByName;	import com.benbowes.EventNavigation;	import com.asual.swfaddress.SWFAddress;	import com.greensock.*;	import com.greensock.easing.*;	import com.benbowes.Global;	//import br.com.stimuli.loading.BulkLoader;   // import br.com.stimuli.loading.BulkProgressEvent;	    public class BgImage extends MovieClip{		//private static var _loader:BulkLoader;		private var SCOPE;		private var CURRENT_IMAGE:Object;		private var PREVIOUS_IMAGE:Object;		private var DestinationX:Number;		private var moveAmount:Number = 20;		public var fullUrl:String;		public var align:String;		private var lastChild:DisplayObject = null;            public function BgImage() {			SCOPE = this;			fullUrl = "";			align = "left";			            SCOPE.addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true);			//SCOPE.addEventListener(Event.ADDED_TO_STAGE, setup, false, 0, true);            //_loader = BulkLoader.createUniqueNamedLoader(1);        }		public function init(event:Event = null){			TweenMax.killTweensOf(SCOPE);			SCOPE.addEventListener(Event.REMOVED_FROM_STAGE, kill,false,0,true);			stage.addEventListener (Event.RESIZE, positionElements, false, 0, true);		}     								public function setUp(obj:Object):void{					   //// for(var i in Global.FLASHVARS){		   // 	trace(i,Global.FLASHVARS[i])		   // }						fullUrl = obj.fullUrl;			align = obj.align;					   	if(fullUrl !=""){				//add neww image     				var ClassReference = getDefinitionByName(fullUrl); 				var bitmap:Bitmap=new Bitmap(new ClassReference(0,0)); 				CURRENT_IMAGE = SCOPE.addChildAt(bitmap,0);								if(Global.FLASHVARS.homeHidden == true){					TweenMax.to (CURRENT_IMAGE,0,{alpha:0, ease:Quint.easeInOut});					TweenMax.to (CURRENT_IMAGE,2,{alpha:1, delay:1, ease:Quint.easeInOut});			    } else{				    TweenMax.to (CURRENT_IMAGE,0,{alpha:1, ease:Quint.easeInOut}); 				} 			 }			 			// fade out last image 				if(PREVIOUS_IMAGE != null){				TweenMax.to (PREVIOUS_IMAGE,0.2,{alpha:0, onComplete:killOldImage});			}else{				positionElements();			}			PREVIOUS_IMAGE = CURRENT_IMAGE;		   					}		private function killOldImage():void{ 			try{     // kill if exists...				SCOPE.removeChildAt(1);   				positionElements();   			}catch(err){}		}				private function positionElements(e:Event = null){			var w=stage.stageWidth;			var h=stage.stageHeight;			// Resize image presuming width will be OK			SCOPE.height = h;			SCOPE.scaleX = SCOPE.scaleY;						if(align == "right"){				SCOPE.x = w - SCOPE.width;			}else{				SCOPE.x = 0;			}		}				//////////////////////////////////////////////////////////////////		private function kill(e:Event):void{			/*try{ _loader.removeEventListener (BulkLoader.COMPLETE, onCompleteHandler);			}catch(e){}			_loader = null;			*/			TweenMax.killChildTweensOf (SCOPE);			SCOPE.removeEventListener(Event.REMOVED_FROM_STAGE, kill);            SCOPE = null;		}				    }} /* FOR EXTERNALLY LOADED IMAGE public function setUp(obj:Object):void{		fullUrl = obj.fullUrl;	align = obj.align;	try{		_loader.add (fullUrl);		_loader.addEventListener (BulkLoader.COMPLETE, onCompleteHandler, false,0,true);	}catch(e){}		_loader.start ();}private function onCompleteHandler (e:ProgressEvent):void {		try{		var im:Bitmap = _loader.getBitmap(fullUrl, true);// true = clearMemory		im.smoothing = true;				//add neww image		CURRENT_IMAGE = SCOPE.addChildAt(im,0);						//TweenMax.from (CURRENT_IMAGE,2,{colorMatrixFilter:{brightness:3, contrast:2}, delay:1, ease:Quint.easeInOut});		TweenMax.to (CURRENT_IMAGE,0,{alpha:0, ease:Quint.easeInOut});		TweenMax.to (CURRENT_IMAGE,2,{alpha:1, delay:1, ease:Quint.easeInOut});	  				// fade out last image 		if(PREVIOUS_IMAGE != null){			TweenMax.to (PREVIOUS_IMAGE,0.2,{alpha:0, onComplete:killOldImage});  	 		}else{			positionElements();		}		PREVIOUS_IMAGE = CURRENT_IMAGE;		_loader.removeEventListener (BulkLoader.COMPLETE, onCompleteHandler);    }catch(e){    }}  */