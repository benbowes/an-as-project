package com.benbowes{	import flash.net.*;	import flash.display.*;	import flash.events.*;	import flash.text.*;	import com.asual.swfaddress.SWFAddress;	import com.benbowes.EventLoadNextThumb;    	import com.greensock.*;	import com.greensock.easing.*;	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	    public class ThumbImageLoader extends Sprite{		private static var _loader:BulkLoader;		private var SCOPE;		public var INDEX;		public var X:Number = 0;                     		public var Y:Number = 0;		private var preloaderWidth:Number = 0;        		private var scale:Number = 0;            		private var _fullUrl:String;    				private var autoScrollEasing:Number = 10;               public function get fullUrl():String{         	return _fullUrl;         }        public function set fullUrl(s:String):void {           _fullUrl = s;		   setUp();        }        public function ThumbImageLoader() {			SCOPE = this;			_fullUrl = null;            SCOPE.addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true);           }		public function init(event:Event = null){      			preloadBar.width = 0;  		}		private function setUp(){			_loader = BulkLoader.createUniqueNamedLoader(1);			try{				_loader.add (fullUrl);				_loader.addEventListener (BulkLoader.COMPLETE, onCompleteHandler, false,0,true);				_loader.addEventListener (BulkLoader.PROGRESS, onProgressHandler, false,0,true);			}catch(e){} 			_loader.start ();     			SCOPE.addEventListener(Event.REMOVED_FROM_STAGE, kill,false,0,true);		}	   		private function onProgressHandler (e):void {   			if(e.percentLoaded>0){			  preloaderWidth = 118 * e.percentLoaded;              			}			TweenMax.to(preloadBar,0.4,{width:preloaderWidth, ease:Quad.easeOut}); 		}		private function onCompleteHandler (e:ProgressEvent):void {			try{				var im:Bitmap = _loader.getBitmap(fullUrl, true);// true = clearMemory				im.smoothing = true;   								container.addChild(im);			    TweenMax.from(container,0.4,{tint:0xD4D8D2, ease:Quad.easeOut});   				  				// Resize image		  		container.height = 118;				container.scaleX = container.scaleY;				if(container.width < 118){   				   	container.width = 118;					container.scaleY = container.scaleX; 				}			    scale = container.scaleY;     							//X = Math.round(SCOPE.x + SCOPE.parent.x );				//Y = Math.round(SCOPE.y + SCOPE.parent.y );							_loader.removeEventListener (BulkLoader.COMPLETE, onCompleteHandler);				_loader.removeEventListener (BulkLoader.PROGRESS, onProgressHandler);            }catch(e){}						addListeners();			dispatchEvent (new EventLoadNextThumb());     		}		private function over(e:MouseEvent=null):void{ 		    //TweenMax.to(SCOPE.parent.expandIcon,0.5,{alpha:1, ease:Quint.easeOut});       			TweenLite.to(preloadBar,0.2,{width:0, ease:Quint.easeOut});		}  		private function out(e:MouseEvent=null):void{   			//TweenMax.to(SCOPE.parent.expandIcon,0.5,{alpha:0, ease:Quint.easeOut});   			TweenLite.to(preloadBar,0.7,{width:preloaderWidth, ease:Quint.easeOut});		}		public function enlarge(e:MouseEvent=null):void{     						trace(-X,-Y); 						SCOPE.parent.currentIndex = INDEX; // tell parent class where we are in the list so the foward + back buttons can keep track			SCOPE.parent.showImageControls();  			  						removeListeners();  						// placr this one on top of thumbs but below controls            SCOPE.parent.setChildIndex(SCOPE,SCOPE.parent.numChildren - 4);						// Resize image - using a test clip - first remove old scaleObject    			if(scaleTestObject.numChildren > 0){ scaleTestObject.removeChild(scaleTestObject.getChildAt(0));   }  			var rect:Shape = new Shape();			rect.graphics.beginFill(0xff0000);			rect.graphics.drawRect(0, 0, container.getChildAt(0).width, container.getChildAt(0).height);			rect.graphics.endFill();			scaleTestObject.addChild(rect);  			  		scaleTestObject.height = stage.stageHeight;			scaleTestObject.scaleX = scaleTestObject.scaleY; 			 			if(scaleTestObject.width < stage.stageWidth){   			   	scaleTestObject.width = stage.stageWidth;				scaleTestObject.scaleY = scaleTestObject.scaleX; 			}    												TweenLite.to(container,0.9,{scaleX:scaleTestObject.scaleX, scaleY:scaleTestObject.scaleY, x:-X, y:-Y, ease:Expo.easeInOut});   			TweenLite.to(imageMask,1,{width:stage.stageWidth, height:stage.stageHeight, x:-X, y:-Y, ease:Expo.easeInOut, onComplete:addAutoScroll});			TweenLite.to(thumbCorners,0,{alpha:0, ease:Expo.easeInOut}); 				scaleTestObject.visible = false;   					}		public function enlargeSlow(e:MouseEvent=null):void{    									trace(-X,-Y,SCOPE.x, SCOPE.parent.x , SCOPE.parent.parent.x , SCOPE.parent.parent.parent.x  ); 									 			SCOPE.parent.currentIndex = INDEX; // tell parent class where we are in the list so the foward + back buttons can keep track			SCOPE.parent.showImageControls();  			  						removeListeners();                                             						// Resize image - using a test clip - first remove old scaleObject    			if(scaleTestObject.numChildren > 0){ scaleTestObject.removeChild(scaleTestObject.getChildAt(0));   }  			var rect:Shape = new Shape();			rect.graphics.beginFill(0xff0000);			rect.graphics.drawRect(0, 0, container.getChildAt(0).width, container.getChildAt(0).height);			rect.graphics.endFill();			scaleTestObject.addChild(rect);  			  		scaleTestObject.height = stage.stageHeight;			scaleTestObject.scaleX = scaleTestObject.scaleY; 			 			if(scaleTestObject.width < stage.stageWidth){   			   	scaleTestObject.width = stage.stageWidth;				scaleTestObject.scaleY = scaleTestObject.scaleX; 			}    						TweenLite.to(container,1.8,{scaleX:scaleTestObject.scaleX, scaleY:scaleTestObject.scaleY, x:-X, y:-Y, ease:Expo.easeInOut});   			TweenLite.to(imageMask,2,{width:stage.stageWidth, height:stage.stageHeight, x:-X, y:-Y, ease:Expo.easeInOut, onComplete:addAutoScroll});			TweenLite.to(thumbCorners,0,{alpha:0, ease:Expo.easeInOut}); 				scaleTestObject.visible = false;       		}		public function hideMe():void{   						if(imageMask.width > 118){ 				SCOPE.parent.hideImageControls();				TweenLite.to(container,1,{scaleX:scale, scaleY:scale, x:0, y:0, ease:Expo.easeInOut});   				TweenLite.to(imageMask,0.7,{width:118, height:118, x:0, y:0, ease:Expo.easeInOut, onComplete:addListeners});				TweenLite.to(thumbCorners,0.2,{alpha:1, delay:0.8, ease:Expo.easeInOut});  				killAutoScroll();			}  								} 		public function hideMeFast():void{  		 			if(imageMask.width > 118){				// placr this one on top of thumbs but below controls	            SCOPE.parent.setChildIndex(SCOPE,SCOPE.parent.numChildren - 4);								SCOPE.parent.hideImageControls();				TweenMax.to(container,0.7,{bezierThrough:[{x:0, y:0}, {x:0, y:0}], scaleX:scale, scaleY:scale, ease:Expo.easeInOut});   				TweenMax.to(imageMask,0.7,{width:118, height:118, bezierThrough:[{x:0, y:0}, {x:0, y:0}], ease:Expo.easeInOut, onComplete:addListeners});				TweenLite.to(thumbCorners,1.5,{alpha:1, ease:Expo.easeInOut});                                                                           				TweenMax.delayedCall(0.4,setNewEnlargedChildIndex);   				killAutoScroll();			}		} 		private function setNewEnlargedChildIndex(){		   //trace("setNewEnlargedChildIndex",INDEX,SCOPE.parent.currentIndex);   		   	// placr this one on top of thumbs but below controls           SCOPE.parent.setChildIndex(SCOPE.parent.getChildByName("full"+SCOPE.parent.currentIndex),SCOPE.parent.numChildren - 4);		}        		private function addListeners(){    			if(preloaderWidth == 118){	        	out();				TweenLite.to(preloadBar,1.3,{alpha:1, ease:Expo.easeInOut});    				SCOPE.buttonMode = true;				SCOPE.mouseEnabled = true;    				SCOPE.addEventListener(MouseEvent.ROLL_OVER,over,false,0,true);				SCOPE.addEventListener(MouseEvent.ROLL_OUT,out,false,0,true);				SCOPE.addEventListener(MouseEvent.CLICK,enlarge,false,0,true);    			}		}		private function removeListeners(){  			over();			TweenLite.to(preloadBar,0.2,{alpha:0, ease:Expo.easeInOut});  			SCOPE.buttonMode = false;			SCOPE.mouseEnabled = false;   			SCOPE.removeEventListener(MouseEvent.ROLL_OVER,over);			SCOPE.removeEventListener(MouseEvent.ROLL_OUT,out);			SCOPE.removeEventListener(MouseEvent.CLICK,enlarge);			} 				private function addAutoScroll(){			stage.addEventListener(Event.ENTER_FRAME,autoScroll,false,0,true);		}		private function killAutoScroll(){			stage.removeEventListener(Event.ENTER_FRAME,autoScroll);		}   		private function autoScroll (e:Event=null):void {			   				// if we are close to the edge then scroll to the edge				var yMous = mouseY - SCOPE.y;				var xMous = mouseX - SCOPE.x;   			 				///////////////////////////////// ADD BOTTOM AND TOP SENSITIVITY				(yMous < 10) ? yMous = SCOPE.container.y: null;				(yMous > imageMask.height - 10) ? yMous = imageMask.height: null;   								(xMous < 10) ? xMous = SCOPE.container.x: null;				(xMous > imageMask.width - 10) ? xMous = imageMask.width: null;								var autoScrollRelativeY = (yMous) / (imageMask.height);				var autoScrollRelativeX = (xMous) / (imageMask.width);								if (autoScrollRelativeY < 0) {					autoScrollRelativeY = 0;				} else if (autoScrollRelativeY > 1) {					autoScrollRelativeY = 1;				}								if (autoScrollRelativeX < 0) {					autoScrollRelativeX = 0;				} else if (autoScrollRelativeX > 1) {					autoScrollRelativeX = 1;				}  				                         				var yVAL = (((-autoScrollRelativeY * (SCOPE.container.height - SCOPE.imageMask.height)) - SCOPE.container.y - (SCOPE.y + SCOPE.parent.y + SCOPE.parent.parent.y)) /autoScrollEasing);                SCOPE.container.y += yVAL;				var xVAL = (((-autoScrollRelativeX * (SCOPE.container.width - SCOPE.imageMask.width)) - SCOPE.container.x - (SCOPE.x + SCOPE.parent.x + SCOPE.parent.parent.x)) /autoScrollEasing);                SCOPE.container.x += xVAL;  		}		//////////////////////////////////////////////////////////////////		private function kill(e:Event=null):void{			TweenMax.killChildTweensOf(SCOPE);						try{				_loader.removeEventListener (BulkLoader.COMPLETE, onCompleteHandler);				_loader.removeEventListener (BulkLoader.PROGRESS, onProgressHandler);			}catch(e){}						try{				_loader.remove(fullUrl);				_loader.clear();				_loader = null;			}catch(e){}						SCOPE.removeEventListener(Event.REMOVED_FROM_STAGE, kill);            SCOPE = null;		}    }}